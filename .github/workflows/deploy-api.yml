name: Deploy API to Production

on:
  push:
    branches: [main]
    paths: ['apps/api/**', 'packages/**']
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/api

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.0.0
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: |
          cd apps/api
          pnpm db:generate
        env:
          DATABASE_URL: "postgresql://dummy:dummy@localhost:5432/dummy"

      - name: Run linting
        run: pnpm --filter @palmera/api run lint

      - name: Run type checking
        run: pnpm --filter @palmera/api run type-check

      - name: Run unit tests
        run: pnpm --filter @palmera/api run test:unit
        env:
          DATABASE_URL: "postgresql://dummy:dummy@localhost:5432/dummy"
          NODE_ENV: "test"

      - name: Run integration tests
        run: pnpm --filter @palmera/api run test:integration
        env:
          DATABASE_URL: "postgresql://dummy:dummy@localhost:5432/dummy"
          NODE_ENV: "test"

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/api
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Staging
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            # Pull latest image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
            # Stop existing container
            docker stop palmera-api-staging || true
            docker rm palmera-api-staging || true
            
            # Run new container
            docker run -d \
              --name palmera-api-staging \
              --restart unless-stopped \
              -p 3002:3002 \
              --env-file /opt/palmera/.env.staging \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
            # Wait for health check
            sleep 30
            curl -f http://localhost:3002/health || exit 1

  deploy-production:
    needs: [build-and-push, deploy-staging]
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to Production
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            # Pull latest image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
            # Create backup of current deployment
            docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:backup-$(date +%Y%m%d-%H%M%S)
            
            # Stop existing container
            docker stop palmera-api-production || true
            docker rm palmera-api-production || true
            
            # Run new container
            docker run -d \
              --name palmera-api-production \
              --restart unless-stopped \
              -p 3002:3002 \
              --env-file /opt/palmera/.env.production \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
            # Wait for health check
            sleep 30
            curl -f http://localhost:3002/health || exit 1
            
            # Clean up old images (keep last 5)
            docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} --format "table {{.Tag}}" | grep -v latest | tail -n +6 | xargs -r docker rmi ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:

  notify:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "Deployment ${{ job.status }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*API Deployment Status:* ${{ job.status }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: always()
